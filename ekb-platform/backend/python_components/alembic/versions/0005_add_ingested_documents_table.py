"""add_ingested_documents_table

Revision ID: 0005
Revises: 0004
Create Date: 2024-08-27 14:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0005'
down_revision: Union[str, None] = '0004'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ingested_documents',
    sa.Column('doc_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('source_uri', sa.Text(), nullable=False),
    sa.Column('doc_type', sa.String(), nullable=False),
    sa.Column('raw_content_ref', sa.Text(), nullable=True),
    sa.Column('extracted_text', sa.Text(), nullable=True),
    sa.Column('doc_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True), # Renamed from metadata
    sa.Column('space_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('uploaded_by_user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ingested_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('content_updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('processing_status', sa.String(), nullable=True, server_default='pending'),
    sa.Column('last_processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True), # Assuming onupdate is handled by trigger or ORM if not server_default
    sa.ForeignKeyConstraint(['space_id'], ['spaces.space_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('doc_id'),
    sa.UniqueConstraint('source_uri', name='uq_ingested_documents_source_uri') # Added unique constraint as per schema
    )
    op.create_index(op.f('ix_ingested_documents_doc_type'), 'ingested_documents', ['doc_type'], unique=False)
    op.create_index(op.f('ix_ingested_documents_processing_status'), 'ingested_documents', ['processing_status'], unique=False)
    op.create_index(op.f('ix_ingested_documents_space_id'), 'ingested_documents', ['space_id'], unique=False)
    op.create_index(op.f('ix_ingested_documents_uploaded_by_user_id'), 'ingested_documents', ['uploaded_by_user_id'], unique=False)
    # Add GIN index for doc_metadata if needed, matching the SQL schema
    op.create_index('idx_ingested_documents_doc_metadata_gin', 'ingested_documents', ['doc_metadata'], unique=False, postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_ingested_documents_doc_metadata_gin', table_name='ingested_documents', postgresql_using='gin')
    op.drop_index(op.f('ix_ingested_documents_uploaded_by_user_id'), table_name='ingested_documents')
    op.drop_index(op.f('ix_ingested_documents_space_id'), table_name='ingested_documents')
    op.drop_index(op.f('ix_ingested_documents_processing_status'), table_name='ingested_documents')
    op.drop_index(op.f('ix_ingested_documents_doc_type'), table_name='ingested_documents')
    op.drop_table('ingested_documents')
    # ### end Alembic commands ###
