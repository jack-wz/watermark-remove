"""seed_default_roles

Revision ID: 0002
Revises: 0001
Create Date: 2024-08-27 11:00:00.000000

"""
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0002'
down_revision: Union[str, None] = '0001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the roles table structure for inserting data
roles_table = sa.table(
    'roles',
    sa.column('role_id', postgresql.UUID),
    sa.column('role_name', sa.String),
    sa.column('description', sa.Text),
    sa.column('created_at', sa.DateTime(timezone=True)),
    sa.column('updated_at', sa.DateTime(timezone=True))
)

DEFAULT_ROLES = [
    {'role_id': str(uuid.uuid4()), 'role_name': 'admin', 'description': 'Administrator with full access.'},
    {'role_id': str(uuid.uuid4()), 'role_name': 'editor', 'description': 'Editor can create and modify content.'},
    {'role_id': str(uuid.uuid4()), 'role_name': 'viewer', 'description': 'Viewer can only view content.'},
]

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Seed default roles
    # Get current time for timestamps
    now = sa.func.now()
    
    roles_to_insert = []
    for role_data in DEFAULT_ROLES:
        roles_to_insert.append({
            'role_id': role_data['role_id'],
            'role_name': role_data['role_name'],
            'description': role_data['description'],
            'created_at': now, # Use database's now() function if possible, or pass Python datetime
            'updated_at': now
        })

    op.bulk_insert(roles_table, roles_to_insert)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove the seeded roles. Be cautious with specific IDs if they are dynamic.
    # It's safer to delete by role_name if IDs are not fixed or known.
    for role_data in DEFAULT_ROLES:
        op.execute(
            roles_table.delete().where(roles_table.c.role_name == sa.text(f"'{role_data['role_name']}'"))
        )
    # ### end Alembic commands ###
